import pandas as pd
import numpy as np

class Backtester:
    def __init__(self, data: pd.DataFrame, transaction_cost=0.001):
        self.data = data.copy()
        self.transaction_cost = transaction_cost

    def run_backtest(self):
        # Ensure required columns exist
        if 'signal' not in self.data or 'close' not in self.data:
            raise ValueError("Data must contain 'signal' and 'close' columns.")

        # Calculate returns
        self.data['market_returns'] = self.data['close'].pct_change()
        self.data['trade'] = self.data['signal'].diff().abs()  # Tracks trades
        self.data['strategy_returns'] = (
            self.data['market_returns'] * self.data['signal'].shift(1)
        ) - (self.transaction_cost * self.data['trade'])

        # Calculate cumulative returns
        self.data['cumulative_returns'] = (1 + self.data['strategy_returns'].fillna(0)).cumprod()

        # Handle edge case where there are no signals
        if self.data['cumulative_returns'].isna().all():
            raise ValueError("No valid signals were generated by the strategy.")

        return self.data
